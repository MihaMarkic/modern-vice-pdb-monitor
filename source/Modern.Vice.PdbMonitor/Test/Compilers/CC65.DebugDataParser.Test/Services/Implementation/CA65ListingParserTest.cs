using System.Collections.Immutable;
using System.Drawing;
using System.Globalization;
using AvaloniaEdit;
using CC65.DebugDataParser.Models.CA65;
using CC65.DebugDataParser.Services.Implementation;
using Modern.Vice.PdbMonitor.Test;
using NUnit.Framework;
using NUnit.Framework.Internal;
using static CC65.DebugDataParser.Services.Implementation.CA65ListingParser;

namespace CC65.DebugDataParser.Test.Services.Implementation;

public class CA65ListingParserTest: BaseTest<CA65ListingParser>
{
    readonly LineInfo info = new LineInfo("000000r", ListingLineType.Code, ImmutableArray<byte?>.Empty);
    [TestFixture]
    public class ExtractAddressAndType : BaseTest<CA65ListingParser>
    {
        [Test]
        public void GivenLineWithoutData_ExtractDataCorrectly()
        {
            var line = "00001Br 1               	.dbg	func, \"test\", \"00\", extern, \"_test\"";
            var actual = Target.ExtractAddressAndType(line.AsSpan()[0..24]);

            Assert.That(actual, Is.EqualTo(new LineInfo("00001Br", ListingLineType.Code, ImmutableArray<byte?>.Empty)));
        }
        [Test]
        public void GivenLineWithData_ExtractDataCorrectly()
        {
            var line = "000000r 1  25 73 0A 00  	.byte	$25,$73,$0A,$00";
            var actual = Target.ExtractAddressAndType(line.AsSpan()[0..24]);

            var expectedData = ImmutableArray<byte?>.Empty
                .Add(byte.Parse("25", NumberStyles.HexNumber))
                .Add(byte.Parse("73", NumberStyles.HexNumber))
                .Add(byte.Parse("0A", NumberStyles.HexNumber))
                .Add(byte.Parse("00", NumberStyles.HexNumber));
            Assert.That(actual.Address, Is.EqualTo("000000r"));
            Assert.That(actual.Type, Is.EqualTo(ListingLineType.Code));
            Assert.That(actual.Data, Is.EquivalentTo(expectedData));
        }
    }
    [TestFixture]
    public class ParseComment: CA65ListingParserTest
    {
        [Test]
        public void GivenEmptyComment_ParsesCorrectly()
        {
            var actual = Target.ParseComment(info, ";");

            Assert.That(actual, Is.EqualTo(new CommentListingLine(info.Address, "")));
        }
        [Test]
        public void GivenComment_ParsesCorrectly()
        {
            var actual = Target.ParseComment(info, "; File generated by cc65 v 2.19 - Git fcda94f");

            Assert.That(actual, Is.EqualTo(new CommentListingLine(info.Address, "File generated by cc65 v 2.19 - Git fcda94f")));
        }
    }
    [TestFixture]
    public class ParseOption : CA65ListingParserTest
    {
        [Test]
        public void GivenTextOption_ParsesCorrectly()
        {
            var actual = Target.ParseOption(info, "	.fopt		compiler,\"cc65 v 2.19 - Git fcda94f\"");

            Assert.That(actual, Is.EqualTo(new StringOptionListingLine(info.Address, "fopt", "compiler,\"cc65 v 2.19 - Git fcda94f\"")));
        }
        [Test]
        public void GivenBoolOptionAndValueIsOn_ValueIsTrue()
        {
            var actual = Target.ParseOption(info, "	.smart		on");

            Assert.That(actual, Is.EqualTo(new BoolOptionListingLine(info.Address, "smart", true)));
        }
        [Test]
        public void GivenBoolOptionAndValueIsOff_ValueIsFalse()
        {
            var actual = Target.ParseOption(info, "	.smart		off");

            Assert.That(actual, Is.EqualTo(new BoolOptionListingLine(info.Address, "smart", false)));
        }
        [Test]
        public void GivenStringArrayOption_ParsesCorrectly()
        {
            var actual = (StringArrayOptionListingLine?)Target.ParseOption(info, "	.importzp	sp, sreg, regsave, regbank");

            Assert.That(actual!.Value, Is.EquivalentTo(new[] { "sp", "sreg", "regsave", "regbank" }));
        }
        [Test]
        public void GivenDataArrayOption_ParsesCorrectly()
        {
            var actual = (StringArrayOptionListingLine?)Target.ParseOption(info, "	.byte	$25,$73,$0A,$00");

            Assert.That(actual!.Value, Is.EquivalentTo(new string[] { "$25", "$73", "$0A", "$00" }));
        }
    }
    [TestFixture]
    public class ParseMacro : CA65ListingParserTest
    {
        [Test]
        public void WhenMacroStart_ParsesCorrectly()
        {
            var actual = Target.ParseMacro(info, ".macro  jeq     Target");

            Assert.That(actual, Is.EqualTo(new MacroStartListingLine(info.Address, "jeq     Target")));
        }
        [Test]
        public void WhenMacroLine_ParsesCorrectly()
        {
            var actual = Target.ParseMacro(info, "        .if     .match(Target, 0)");

            Assert.That(actual, Is.EqualTo(new MacroListingLine(info.Address, ".if     .match(Target, 0)")));
        }
        [Test]
        public void WhenMacroEnd_ParsesCorrectly()
        {
            var actual = Target.ParseMacro(info, ".endmacro");

            Assert.That(actual, Is.EqualTo(new MacroEndListingLine(info.Address)));
        }
    }
    [TestFixture]
    public class ParseFileDbg : CA65ListingParserTest
    {
        [Test]
        public void GivenFileSample_ParsesCorrectly()
        {
            var actual = Target.ParseFileDbg(info, "\"hello.c\", 237, 1657975843");

            Assert.That(actual, Is.EqualTo(new FileDbgListingLine(info.Address, "hello.c", 237, 1657975843)));
        }
    }
    [TestFixture]
    public class ParseFuncDbg : CA65ListingParserTest
    {
        [Test]
        public void GivenSample_ParsesCorrectly()
        {
            var actual = Target.ParseFuncDbg(info, "\"test\", \"00\", extern, \"_test\"");

            Assert.That(actual, Is.EqualTo(new ExternFuncDbgListingLine(info.Address, "test", "00", "_test")));
        }
    }
    [TestFixture]
    public class ParseLineDbg : CA65ListingParserTest
    {
        [Test]
        public void GivenSample_ParsesCorrectly()
        {
            var actual = Target.ParseLineDbg(info, "\"hello.c\", 10");

            Assert.That(actual, Is.EqualTo(new ContentLineDbgListingLine(info.Address, "hello.c", 10)));
        }
        [Test]
        public void GivenEmptySample_ParsesCorrectly()
        {
            var actual = Target.ParseLineDbg(info, "");

            Assert.That(actual, Is.EqualTo(new EmptyLineDbgListingLine(info.Address)));
        }
    }
    [TestFixture]
    public class ParseSymDbg : CA65ListingParserTest
    {
        [Test]
        public void GivenExternalSymbol_ReturnsExternSymDbgListingLine()
        {
            var actual = Target.ParseSymDbg(info, "\"printf\", \"00\", extern, \"_printf\"");

            Assert.That(actual, Is.EqualTo(new ExternSymDbgListingLine(info.Address, "printf", "00", "_printf")));
        }
        [Test]
        public void GivenAutoSymbol_ReturnsAutoSymDbgListingLine()
        {
            var actual = Target.ParseSymDbg(info, "\"i\", \"00\", auto, 0");

            Assert.That(actual, Is.EqualTo(new AutoSymDbgListingLine(info.Address, "i", "00", 0)));
        }
    }
    [TestFixture]
    public class ParseMeta : CA65ListingParserTest
    {
        [Test]
        public void GivenSampleSegment_ParsesCorrectly()
        {
            var actual = Target.ParseMeta(info, "segment	\"CODE\"");

            Assert.That(actual, Is.EqualTo(new SegmentListingLine(info.Address, "CODE")));
        }
        [Test]
        public void GivenStartProcSample_ParsesCorrectly()
        {
            var actual = Target.ParseMeta(info, "proc	_test2: near");

            Assert.That(actual, Is.EqualTo(new StartProcListingLine(info.Address, "_test2: near")));
        }
        [Test]
        public void GivenEndProcSample_ParsesCorrectly()
        {
            var actual = Target.ParseMeta(info, "endproc");

            Assert.That(actual, Is.EqualTo(new EndProcListingLine(info.Address)));
        }
    }
    [TestFixture]
    public class ParseCode : CA65ListingParserTest
    {
        [Test]
        public void GivenUnLabeledSample_ParsesCorrectly()
        {
            LineInfo codeInfo = new LineInfo("000000r", ListingLineType.Code, ImmutableArray<byte?>.Empty.AddRange(new byte?[] { 0xA9, null }));
            var actual = Target.ParseCode(codeInfo, "	lda     #<(S0001)");

            Assert.That(actual.Label, Is.Null);
            Assert.That(actual.Instructions, Is.EquivalentTo(new byte?[] { 0xA9, null  }));
        }
        [Test]
        public void GivenLabeledSample_ParsesCorrectly()
        {
            LineInfo codeInfo = new LineInfo("000000r", ListingLineType.Code, ImmutableArray<byte?>.Empty);
            var actual = Target.ParseCode(codeInfo, "L0001:	rts");

            Assert.That(actual.Label, Is.EqualTo("L0001"));
        }
    }
    [TestFixture]
    public class ParseAsync : CA65ListingParserTest
    {
        [Test]
        public async Task GivenMacroCode_ParsesMacroLinesCorrectly()
        {
            const string lines =
@"000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2               .endmacro";

            using var sr = new StringReader(lines);

            var actual = await Target.ParseAsync(sr, default);

            Assert.That(actual.Lines.Length, Is.EqualTo(3));
            Assert.That(actual.Lines[0].Parsed, Is.EqualTo(new MacroStartListingLine("000000r", "jeq     Target")));
            Assert.That(actual.Lines[0].Original, Is.EqualTo("000000r 2               .macro  jeq     Target"));
            Assert.That(actual.Lines[1].Parsed, Is.EqualTo(new MacroListingLine("000000r", ".if     .match(Target, 0)")));
            Assert.That(actual.Lines[1].Original, Is.EqualTo("000000r 2                       .if     .match(Target, 0)"));
            Assert.That(actual.Lines[2].Parsed, Is.EqualTo(new MacroEndListingLine("000000r")));
            Assert.That(actual.Lines[2].Original, Is.EqualTo("000000r 2               .endmacro"));
        }
        [Test]
        public async Task GivenUnLabeledSampleCode_ParsesCorrectly()
        {
            const string lines = @"000000r 1  A9 rr        	lda     #<(S0001)";
            using var sr = new StringReader(lines);

            var actual = await Target.ParseAsync(sr, default);

            var line = (CodeListingLine)actual.Lines.Single().Parsed;

            Assert.That(actual.Lines.Length, Is.EqualTo(1));
            Assert.That(line.Instructions, Is.EquivalentTo(new byte?[] { 0xA9, null }));
        }
        [Test]
        public async Task GivenLabeledSampleCode_ParsesCorrectly()
        {
            const string lines = @"00001Ar 1  60           L0001:	rts";
            using var sr = new StringReader(lines);

            var actual = await Target.ParseAsync(sr, default);

            var line = (CodeListingLine)actual.Lines.Single().Parsed;

            Assert.That(actual.Lines.Length, Is.EqualTo(1));
            Assert.That(line.Instructions, Is.EquivalentTo(new byte?[] { 0x60 }));
            Assert.That(line.Label, Is.EqualTo("L0001"));
        }
        [Test]
        public async Task GivenLabeledWithoutTabsSamplecode_ParsesCorrectly()
        {
            const string lines = @"000000r 1  C8 45 4C 4C      _text:  .asciiz ""Hello world!""";
            using var sr = new StringReader(lines);

            var actual = await Target.ParseAsync(sr, default);

            var line = (CodeListingLine)actual.Lines.Single().Parsed;

            Assert.That(actual.Lines.Length, Is.EqualTo(1));
            Assert.That(line.Instructions, Is.EquivalentTo(new byte?[] { 0xC8, 0x45, 0x4C, 0x4C }));
            Assert.That(line.Label, Is.EqualTo("_text"));
        }
        [Test]
        public async Task GivenOnlyInstructions_ReturnsEmptyCodeLine()
        {
            const string lines = @"000004r 1  4F 20 57 4F  ";
            using var sr = new StringReader(lines);

            var actual = await Target.ParseAsync(sr, default);

            var line = (CodeListingLine)actual.Lines.Single().Parsed;

            Assert.That(actual.Lines.Length, Is.EqualTo(1));
            Assert.That(line, Is.TypeOf<EmpyCodeListingLine>());
            Assert.That(line.Instructions, Is.EquivalentTo(new byte?[] { 0x4F, 0x20, 0x57, 0x4F }));
        }
    }
    [TestFixture]
    public class GetLabelEndIndex : CA65ListingParserTest
    {
        [TestCase("_text:  .asciiz \"Hello world!\"", ExpectedResult = 5)]
        [TestCase("L0001:	rts", ExpectedResult = 5)]
        public int? GivenSampleWithLabel_ReturnsCorrectValue(string text)
        {
            return CA65ListingParser.GetLabelEndIndex(text);
        }
        [TestCase(" _text:  .asciiz \"Hello world!\"")]
        [TestCase("L0001 :	rts")]
        public void GivenSampleWithoutLabel_ReturnsNull(string text)
        {
            var actual = CA65ListingParser.GetLabelEndIndex(text);

            Assert.That(actual, Is.Null);
        }
    }
}
