ca65 V2.19 - Git 7165b29
Main file   : out/hello.s
Current file: out/hello.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 7165b29
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 7165b29"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	on
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.dbg		file, "hello.c", 170, 1658134876
000000r 1               	.dbg		file, "D:\Utilities\cc65\include/stdio.h", 6742, 1657832249
000000r 1               	.dbg		file, "D:\Utilities\cc65\include/stdlib.h", 5997, 1657832249
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.dbg		sym, "printf", "00", extern, "_printf"
000000r 1               	.dbg		sym, "text", "00", extern, "_text"
000000r 1               	.import		_printf
000000r 1               	.import		_text
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               S0001:
000000r 1  25 73 0A 00  	.byte	$25,$73,$0A,$00
000004r 1               
000004r 1               ; ---------------------------------------------------------------
000004r 1               ; int __near__ main (void)
000004r 1               ; ---------------------------------------------------------------
000004r 1               
000004r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               	.dbg	func, "main", "00", extern, "_main"
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               	.dbg	line, "hello.c", 8
000000r 1  A9 rr        	lda     #<(S0001)
000002r 1  A2 rr        	ldx     #>(S0001)
000004r 1  20 rr rr     	jsr     pushax
000007r 1  A9 rr        	lda     #<(_text)
000009r 1  A2 rr        	ldx     #>(_text)
00000Br 1  20 rr rr     	jsr     pushax
00000Er 1  A0 04        	ldy     #$04
000010r 1  20 rr rr     	jsr     _printf
000013r 1               	.dbg	line, "hello.c", 9
000013r 1  A2 00        	ldx     #$00
000015r 1  A9 00        	lda     #$00
000017r 1  4C rr rr     	jmp     L0001
00001Ar 1               	.dbg	line, "hello.c", 10
00001Ar 1  60           L0001:	rts
00001Br 1               
00001Br 1               	.dbg	line
00001Br 1               .endproc
00001Br 1               
00001Br 1               
